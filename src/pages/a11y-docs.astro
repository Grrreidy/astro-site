---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title="Accessibility helper" description="Generate accessibility guidance for your components" />
  </head>
  <body>
    <Header />

    <main class="container blog">
      <h1>Write my docs</h1>
      <p>Can AI write design system accessibility docs? Try it out!</p><p>Add a link to your Storybook, zeroheight or design system docs site to make the docs bespoke to your design system.</p>

      <form id="a11y-form" class="a11y-form" novalidate>
        <div class="form-field">
          <label for="component">Component name</label>
          <input id="component" name="component" required aria-describedby="component-help" />
          <p id="component-help" class="field-help">Try: Button, Tabs or Modal</p>
        </div>

        <div class="form-field">
          <label for="url">Storybook or docs URL</label>
          <input id="url" name="url" type="url" required aria-describedby="url-help" />
          <p id="url-help" class="field-help">Try: https://webc.pie.design/</p>
        </div>

        <button type="submit" class="default-button">Generate docs</button>
      </form>
<hr>
      <p class="field-help">Made with <a href="https://platform.openai.com/">Open AI</a> and <a href="https://docs.netlify.com/build/functions/overview/">Netlify</a>.</p>

      <p id="status" class="field-help" aria-live="polite"></p>

      <section id="result" class="a11y-result blog-content" hidden>
        <pre id="output"></pre>
        <div class="actions">
          <button id="copy" class="action-button">Copy markdown</button>
          <button id="download" class="action-button">Download .md</button>
        </div>
      </section>
    </main>

    <Footer />

 

    <script is:inline>
      const form = document.getElementById('a11y-form');
      const statusEl = document.getElementById('status');
      const resultSection = document.getElementById('result');
      const outEl = document.getElementById('output');
      const copyBtn = document.getElementById('copy');
      const dlBtn = document.getElementById('download');

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        statusEl.textContent = 'Generatingâ€¦';
        resultSection.hidden = true;
        outEl.textContent = '';

        const payload = Object.fromEntries(new FormData(form));

        try {
          const res = await fetch('/.netlify/functions/a11y-generate', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });

          const text = await res.text();
          let data;
          try { data = JSON.parse(text); } catch { data = { error: text }; }

          if (!res.ok) {
            statusEl.textContent = (typeof data.error === 'string')
              ? data.error
              : JSON.stringify(data.error);
            return;
          }

          const { markdown } = data;
          outEl.textContent = markdown || '';
          resultSection.hidden = false;
          statusEl.textContent = ''; // no "Done" message

          copyBtn.onclick = () => navigator.clipboard.writeText(markdown || '');
          dlBtn.onclick = () => {
            const a = document.createElement('a');
            a.href = URL.createObjectURL(new Blob([markdown || ''], { type: 'text/markdown' }));
            a.download = `${(payload.component || 'component').toLowerCase()}-accessibility.md`;
            a.click();
          };
        } catch (err) {
          statusEl.textContent = String(err);
        }
      });
    </script>
  </body>
</html>
