---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title="Accessibility docs" description="Generate accessibility docs for your components" />
  </head>
  <body>
    <Header />

    <main class="container blog">
      <h1>Write my docs</h1>
      <p>Can AI write design system accessibility docs? Try it out!</p>
      <p>Add a link to your Storybook, zeroheight or design system docs site to make the docs bespoke to your design system.</p>

      <form id="a11y-form" class="a11y-form" novalidate>
        <div class="form-field">
          <label for="component">Component name</label>
          <input id="component" name="component" required aria-describedby="component-help component-error" />
          <p id="component-help" class="field-help">Try: Accordion, Card, Button, Tooltip or Modal</p>
          <p id="component-error" class="field-help" style="color: var(--color-red);" hidden>Component field is required</p>
        </div>

        <div class="form-field">
          <label for="url">Storybook or docs URL</label>
          <input id="url" name="url" type="url" aria-describedby="url-help" />
          <p id="url-help" class="field-help">Try: https://webc.pie.design/</p>
        </div>

        <button type="submit" class="default-button">Generate docs</button>
      </form>

      <!-- Body-sized status with spinner and two-line message -->
      <p id="status" class="status-message" role="status" aria-live="polite" aria-atomic="true"></p>

      <hr>

      <section id="result" class="a11y-result blog-content" hidden>
        <pre id="output"></pre>
        <div class="actions">
          <button id="copy" class="action-button">Copy markdown</button>
          <button id="download" class="action-button">Download .md</button>
        </div>
      </section>

        <p class="field-help">
        Made with <a href="https://platform.openai.com/">Open AI</a> and 
        <a href="https://docs.netlify.com/build/functions/overview/">Netlify</a>. This is an experiment. Generated content isnâ€™t guaranteed to be accurate or complete. Please review and validate before use.
      </p>
    </main>

    <Footer />

    <style>
      .a11y-result { margin-block-start: var(--space-l); }
      .a11y-result pre {
        background: #ffffff;
        padding: 1rem;
        border-radius: 12px;
        white-space: pre-wrap;
        overflow-x: auto;
        border: 2px dashed var(--color-blue);
      }
      .a11y-result .actions {
        display: flex;
        gap: var(--space-s);
        margin-top: var(--space-s);
      }

      /* Status + spinner (token-agnostic and body-sized) */
      .status-message {
        margin-top: var(--space-m);
        display: grid;
        gap: 0.25rem;
        font-size: inherit;
        color: var(--color-blue, inherit);
        min-height: 2.25rem;
      }
      .status-row {
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
      }
      .spinner {
        display: inline-block;
        width: 1em;
        height: 1em;
        border: 0.2em solid var(--color-blue, currentColor);
        border-right-color: transparent;
        border-radius: 50%;
        animation: spin 0.6s linear infinite;
        vertical-align: -0.125em;
      }
      @keyframes spin { to { transform: rotate(360deg); } }
      @media (prefers-reduced-motion: reduce) { .spinner { animation: none; } }
    </style>

    <script is:inline>
      const form = document.getElementById('a11y-form');
      const statusEl = document.getElementById('status');
      const resultSection = document.getElementById('result');
      const outEl = document.getElementById('output');
      const copyBtn = document.getElementById('copy');
      const dlBtn = document.getElementById('download');
      const componentError = document.getElementById('component-error');
      const componentInput = document.getElementById('component');

      function showGenerating() {
        statusEl.innerHTML = `
          <span class="status-row">
            <strong>Generating</strong>
            <span class="spinner" aria-hidden="true"></span>
          </span>
          <span>This references A LOT of material so might take up to 30 seconds.</span>
        `;
        form.setAttribute('aria-busy', 'true');
      }
      function clearStatus() {
        statusEl.textContent = '';
        form.removeAttribute('aria-busy');
      }

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        componentError.hidden = true;

        if (!componentInput.value.trim()) {
          componentError.hidden = false;
          return;
        }

        showGenerating();
        resultSection.hidden = true;
        outEl.textContent = '';

        const fd = new FormData(form);
        const payload = Object.fromEntries(fd);
        payload.component = (payload.component || '').trim();
        payload.url = (payload.url || '').trim();

        try {
          const res = await fetch('/.netlify/functions/a11y-docs', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
          });

          const text = await res.text();
          let data;
          try { data = JSON.parse(text); } catch { data = { error: text }; }

          if (!res.ok) {
            const errStr = typeof data.error === 'string'
              ? data.error
              : (data.error?.error?.message || JSON.stringify(data.error));
            if (typeof errStr === 'string' && errStr.includes('Component field is required')) {
              componentError.hidden = false;
            } else {
              statusEl.textContent = errStr;
            }
            clearStatus();
            return;
          }

          const { markdown } = data;
          outEl.textContent = markdown || '';
          resultSection.hidden = false;
          clearStatus();

          copyBtn.onclick = () => navigator.clipboard.writeText(markdown || '');
          dlBtn.onclick = () => {
            const a = document.createElement('a');
            a.href = URL.createObjectURL(new Blob([markdown || ''], { type: 'text/markdown' }));
            a.download = `${(payload.component || 'component').toLowerCase()}-accessibility.md`;
            a.click();
          };
        } catch (err) {
          statusEl.textContent = String(err);
          clearStatus();
        }
      });
    </script>
  </body>
</html>
