---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title="Componenta11y" description="Generate cross-platform accessibility guidance for a component" />
  </head>
  <body>
    <Header />

    <main class="container blog">
      <h1 class="h1-small">Generate accessibility guidance for a component</h1>
      <p></p>

      <form id="a11y-form" class="a11y-form" novalidate>
        <div class="form-field">
          <label for="component">Component</label>
          <input id="component" name="component" required aria-describedby="component-help component-error" />
          <p id="component-help" class="field-help">Try: Accordion, Card, Button, Tooltip or Modal</p>
          <!-- Body-sized red error with warning icon -->
          <p id="component-error" class="field-error" hidden>Enter a component</p>
        </div>

        <button id="generate-btn" type="submit" class="default-button">
          <span class="btn-text">Generate guidance</span>
          <span id="btn-spinner" class="btn-spinner" aria-hidden="true" hidden></span>
        </button>
      </form>

      <p id="status" class="status-message" role="status" aria-live="polite" aria-atomic="true"></p>

      <section id="result" class="a11y-result blog-content" hidden>
        <div id="output" class="blog-content"></div>
      </section>

      <p class="field-help" style="margin-top: var(--space-xl);">
        Made with <a href="https://platform.openai.com/">OpenAI</a> and 
        <a href="https://docs.netlify.com/build/functions/overview/">Netlify</a>. This is an experiment. Generated content isn’t guaranteed to be accurate or complete. Please review and validate before use.
      </p>
    </main>

    <Footer />

    <style>
      [hidden] { display: none !important; }

      .a11y-result { margin-block-start: var(--space-l); }
      .a11y-result .blog-content {
        background: #ffffff;
        padding: 1rem;
        border-radius: 12px;
        border: 2px dashed var(--color-blue);
      }
      #output ul, #output ol { margin: 0 0 var(--space-m) 1rem; }
      #output h2, #output h3 { margin-top: var(--space-m); }
      #output p + h2, #output ul + h2, #output ol + h2 { margin-top: var(--space-l); }

      .status-message {
        margin-top: var(--space-m);
        color: var(--color-blue, inherit);
        min-height: 1.5rem;
      }

      /* Body-sized red error with warning icon */
      .field-error {
        font-size: inherit;
        color: var(--color-red);
        display: inline-flex;
        align-items: center;
        gap: .4rem;
        margin-top: .25rem;
      }
      .field-error::before {
        content: "⚠︎";
        font-size: 1em;
        line-height: 1;
        display: inline-block;
      }

      /* Button spinner: white by default, red on hover */
      .btn-spinner {
      display: inline-block;
      margin-left: 0.5em;
      width: 1em;
      height: 1em;
      border: 0.2em solid var(--color-white);
      border-top: 0.2em solid transparent;
      border-radius: 50%;
      animation: spin 0.8s linear infinite;
      vertical-align: middle;
      }
      .default-button:hover .btn-spinner {
      border-color: var(--color-red);
      border-top-color: transparent;
      }

      @keyframes spin { 100% { transform: rotate(360deg); } }
      @media (prefers-reduced-motion: reduce) {
        .btn-spinner { animation: none; }
      }
    </style>

    <script type="module" is:inline>
      const form = document.getElementById('a11y-form');
      const btn  = document.getElementById('generate-btn');
      const btnSpinner = document.getElementById('btn-spinner');
      const statusEl = document.getElementById('status');
      const resultSection = document.getElementById('result');
      const outEl = document.getElementById('output');
      const componentInput = document.getElementById('component');
      const componentError = document.getElementById('component-error');

      let isLoading = false; // keep hover styles active; prevent double-submit

      function showLoading() {
        isLoading = true;
        statusEl.textContent = 'This references A LOT of material so might take up to 30 seconds.';
        btnSpinner.hidden = false;               // show spinner in button
        btn.setAttribute('aria-disabled', 'true');
        form.setAttribute('aria-busy', 'true');
      }
      function clearLoading() {
        isLoading = false;
        btnSpinner.hidden = true;                // hide spinner
        btn.removeAttribute('aria-disabled');
        form.removeAttribute('aria-busy');
      }

      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        if (isLoading) return;

        componentError.hidden = true;

        const component = componentInput.value.trim();
        if (!component) {
          componentError.hidden = false; 
          
          return;
        }

        showLoading();
        resultSection.hidden = true;
        outEl.innerHTML = '';

        try {
          const res = await fetch('/.netlify/functions/componenta11y', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ component })
          });

          const text = await res.text();
          let data; try { data = JSON.parse(text); } catch { data = { error: text }; }

          if (!res.ok) {
            statusEl.textContent = typeof data.error === 'string' ? data.error : JSON.stringify(data.error);
            return;
          }

          const { html } = data;
          outEl.innerHTML = html || '';
          resultSection.hidden = !html;
          statusEl.textContent = html ? '' : 'No content returned.';
        } catch (err) {
          console.error(err);
          statusEl.textContent = 'Generation failed. Check console for details.';
        } finally {
          clearLoading();
        }
      });
    </script>
  </body>
</html>
