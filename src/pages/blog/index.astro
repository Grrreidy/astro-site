---
import BaseHead from '../../components/BaseHead.astro';
import Header from '../../components/Header.astro';
import Footer from '../../components/Footer.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../../consts';
import { getCollection, z } from 'astro:content';
import FormattedDate from '../../components/FormattedDate.astro';

const now = new Date();

// Extend the type to include optional draft property
type BlogFrontmatter = {
  title: string;
  description: string;
  pubDate: Date;
  updatedDate?: Date;
  heroImage?: {
    src: string;
    width: number;
    height: number;
    format: "png" | "jpg" | "jpeg" | "tiff" | "webp" | "gif" | "svg" | "avif";
  };
  draft?: boolean;
};

// Filter at source:
// • In dev: include everything
// • In prod: exclude draft:true and exclude future-dated posts
const blogPosts = await getCollection(
  'blog',
  ({ data }: { data: BlogFrontmatter }) =>
    import.meta.env.DEV ||
    (!data.draft && new Date(data.pubDate).valueOf() <= now.valueOf())
);

const externalPosts = await getCollection('external');

type PostListItem = {
  title: string;
  description: string;
  pubDate: Date;
  slug: string;
  external: boolean;
  image?: string;
};

const allPosts: PostListItem[] = [
  ...blogPosts.map((post) => ({
    title: post.data.title,
    description: post.data.description,
    pubDate: post.data.pubDate,
    slug: `/blog/${post.slug}`,
    external: false,
    image: post.data.heroImage?.src ?? undefined,
  })),
  ...externalPosts.map((post) => ({
    title: post.data.title,
    description: post.data.description,
    pubDate: post.data.pubDate,
    slug: post.data.url,
    external: true,
    image: undefined,
  })),
].sort((a, b) => new Date(b.pubDate).valueOf() - new Date(a.pubDate).valueOf());
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <BaseHead title={SITE_TITLE} description={SITE_DESCRIPTION} />
  </head>
  <body>
    <Header />
    <main id="main-content" class="container post">
      <h1>Blog</h1>
      <div class="post-intro">
        <p>Writing helps me untangle my thoughts.
        I&nbsp;write about accessibility, design systems, and user experience.</p>
        <p>If you use a feed reader, <a href="https://gerireid.com/rss.xml">here’s my RSS feed</a>.</p>
      </div>
      <section>
        <ul>
          {allPosts.map((post) => (
            <li class="post-item">
              <div class="post-date">
                <FormattedDate date={post.pubDate} />
              </div>
              <div class="post-content">
                <h2>
                  <a
                    href={post.slug}
                    target={post.external ? "_blank" : "_self"}
                    rel={post.external ? "noopener noreferrer" : undefined}
                  >
                    {post.title}
                    {post.external && (
                      <>
                        <span aria-hidden="true"> ↗</span>
                        <span class="visually-hidden">(opens in new tab)</span>
                      </>
                    )}
                  </a>
                </h2>
                <p>{post.description}</p>
                {post.image && (
                  <img
                    src={post.image}
                    alt=""
                    class="post-thumb"
                    loading="lazy"
                    decoding="async"
                  />
                )}
                {import.meta.env.DEV && (post as any).draft && (
                  <p class="visually-hidden">Draft</p>
                )}
              </div>
            </li>
          ))}
        </ul>
      </section>
    </main>
    <Footer />
  </body>
</html>
