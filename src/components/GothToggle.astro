---
const label = "Goth mode";
---

<label class="goth-switch">
  <input type="checkbox" id="goth-toggle" aria-label={label} />
  <span class="slider" aria-hidden="true"></span>
  <span class="switch-label">Fantasy Goth Mode ðŸ”®</span>
</label>

<script>
  (function () {
    const LINK_ID = "goth-css";
    const CSS_HREF = "/themes/goth/goth.css";
    const DECOR_URL = "/themes/goth/decor.html";
    const WRAP_ID = "goth-decor-wrapper";
    const KEY = "theme:goth";
    const cb = document.getElementById("goth-toggle");

    // --- Cursor trail config ---
    const TRAIL_CLASS = "goth-trail";
    const TRAIL_MAX = 72;              // more particles
    const TRAIL_TTL_MS = 900;          // longer life
    const TRAIL_THROTTLE_MS = 14;      // ~70fps cap
    let trailOn = false;
    let lastSpawn = 0;
    let live = 0;

    function prefersReducedMotion() {
      return window.matchMedia && window.matchMedia("(prefers-reduced-motion: reduce)").matches;
    }

    function makeParticle(x, y) {
      const el = document.createElement("span");
      el.className = TRAIL_CLASS;

      const isComet = Math.random() < 0.13; // occasional comet
      const size = isComet ? 22 + Math.random() * 16 : 12 + Math.random() * 12;
      const rot = Math.floor(Math.random() * 360);
      const hueBase = 270 + Math.floor(Math.random() * 60); // purpleâ†’magenta
      const hueShift = 30 + Math.floor(Math.random() * 60); // headâ†’tail shift
      const sat = 88 + Math.floor(Math.random() * 10);
      const light1 = 65 + Math.floor(Math.random() * 10);
      const light2 = 55 + Math.floor(Math.random() * 10);

      const c1 = `hsl(${hueBase} ${sat}% ${light1}%)`;
      const c2 = `hsl(${hueBase + hueShift} ${sat}% ${light2}%)`;

      el.style.left = x + "px";
      el.style.top = y + "px";
      el.style.width = size + "px";
      el.style.height = size + "px";
      el.style.transform = `translate(-50%, -50%) rotate(${rot}deg)`;
      el.style.setProperty("--c1", c1);
      el.style.setProperty("--c2", c2);

      if (isComet) el.classList.add("goth-trail--comet");

      document.body.appendChild(el);
      live++;

      setTimeout(function () {
        el.remove();
        live = Math.max(0, live - 1);
      }, isComet ? TRAIL_TTL_MS + 300 : TRAIL_TTL_MS);
    }

    function onMove(e) {
      const now = performance.now();
      if (now - lastSpawn < TRAIL_THROTTLE_MS) return;
      lastSpawn = now;
      if (live >= TRAIL_MAX) return;

      const jx = e.pageX + (Math.random() * 10 - 5);
      const jy = e.pageY + (Math.random() * 10 - 5);
      makeParticle(jx, jy);
    }

    function onPop(e) {
      if (live >= TRAIL_MAX - 10) return;
      const count = 10;
      for (let i = 0; i < count; i++) {
        const angle = (Math.PI * 2 * i) / count + Math.random() * 0.3;
        const r = 12 + Math.random() * 22;
        makeParticle(e.pageX + Math.cos(angle) * r, e.pageY + Math.sin(angle) * r);
      }
    }

    function startTrail() {
      if (trailOn || prefersReducedMotion()) return;
      trailOn = true;
      window.addEventListener("mousemove", onMove, { passive: true });
      window.addEventListener("pointerdown", onPop, { passive: true });
    }

    function stopTrail() {
      if (!trailOn) return;
      trailOn = false;
      window.removeEventListener("mousemove", onMove);
      window.removeEventListener("pointerdown", onPop);
      document.querySelectorAll("." + TRAIL_CLASS).forEach(function (n) { n.remove(); });
      live = 0;
    }

    function ensureCssLink() {
      let el = document.getElementById(LINK_ID);
      if (!el) {
        el = document.createElement("link");
        el.id = LINK_ID;
        el.rel = "stylesheet";
        el.href = CSS_HREF;
        el.media = "all";
        el.disabled = true;
        document.head.appendChild(el);
      }
      return el;
    }

    async function mountDecor() {
      if (document.getElementById(WRAP_ID)) return;
      try {
        const res = await fetch(DECOR_URL, { credentials: "same-origin" });
        if (!res.ok) return;
        const html = await res.text();
        const wrap = document.createElement("div");
        wrap.id = WRAP_ID;
        wrap.innerHTML = html;
        document.body.appendChild(wrap);
      } catch (err) {
        /* ignore network errors */
      }
    }

    function unmountDecor() {
      const el = document.getElementById(WRAP_ID);
      if (el) el.remove();
    }

    function setOn(on) {
      const link = ensureCssLink();
      link.disabled = !on;
      localStorage.setItem(KEY, on ? "on" : "off");
      if (cb) cb.checked = on;

      if (on) {
        mountDecor();
        startTrail();
      } else {
        stopTrail();
        unmountDecor();
      }
    }

    // --- URL pre-enable support
    function shouldEnableFromUrl() {
      const params = new URLSearchParams(location.search);
      const q = params.get("theme");
      const hash = (location.hash || "").replace("#", "").toLowerCase();
      if (q === "goth" || hash === "goth") return true;
      if (q === "default") return false;
      return null;
    }

    function cleanUrl() {
      const params = new URLSearchParams(location.search);
      let changed = false;
      if (params.has("theme")) { params.delete("theme"); changed = true; }
      if ((location.hash || "").toLowerCase() === "#goth") { changed = true; }
      if (changed && history.replaceState) {
        const qs = params.toString();
        history.replaceState({}, "", location.pathname + (qs ? "?" + qs : ""));
      }
    }
    // --- end URL pre-enable

    ensureCssLink();

    const urlChoice = shouldEnableFromUrl();
    if (urlChoice !== null) {
      setOn(urlChoice);
      cleanUrl();
    } else {
      setOn(localStorage.getItem(KEY) === "on");
    }

    if (cb) {
      cb.addEventListener("change", function (e) {
        const t = e.target;
        if (t && "checked" in t) setOn(t.checked);
      });
    }
  })();
</script>

<style>
  /* 
     SWITCH
  =================================================== */
  .goth-switch {
    --stripe-w: 5px;
    --goth-purple: #A73DF8;

    display: inline-flex;
    align-items: center;
    gap: 0.6rem;
    margin-top: var(--space-l);
    cursor: pointer;
    color: var(--color-white);
    font-size: var(--font-m);
    user-select: none;
  }

  .goth-switch input {
    position: absolute;
    opacity: 0;
    inline-size: 0;
    block-size: 0;
  }

  .goth-switch .slider {
    position: relative;
    inline-size: 2.8rem;
    block-size: 1.6rem;
    border-radius: 999px;
    border: 2px solid var(--color-white);
    background-color: var(--goth-purple);
    overflow: hidden;
  }

  .goth-switch .slider::before {
    content: "";
    position: absolute;
    top: .15rem;
    left: .15rem;
    inline-size: 1.1rem;
    block-size: 1.1rem;
    border-radius: 50%;
    background-color: #fff;
    z-index: 2;
    transition: transform .2s;
  }

  .goth-switch .slider::after {
    content: "";
    position: absolute;
    inset: 0;
    inline-size: 320%;
    block-size: 100%;
    background:
      repeating-linear-gradient(
        45deg,
        var(--goth-purple) 0,
        var(--goth-purple) var(--stripe-w),
        #ffffff           var(--stripe-w),
        #ffffff           calc(var(--stripe-w) * 2)
      );
    transform: translateX(-66%);
    opacity: 0;
    will-change: transform;
    z-index: 1;
    pointer-events: none;
  }

  .goth-switch input:focus-visible + .slider {
    outline: 0.125em solid var(--color-white);
    outline-offset: 2px;
  }

  .goth-switch input:checked + .slider::after {
    opacity: 1;
    animation: stripes-marquee 1.2s linear infinite;
  }

  .goth-switch input:checked + .slider::before {
    transform: translateX(1.2rem);
  }

  @keyframes stripes-marquee {
    from { transform: translateX(-66%); }
    to   { transform: translateX(-33%); }
  }

  .switch-label {
    color: var(--color-white);
    font-family: 'Twilight', "Times New Roman", serif;
  }

  @media (prefers-reduced-motion: reduce) {
    .goth-switch input:checked + .slider::after { animation: none; }
  }
</style>
