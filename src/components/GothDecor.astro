---
const label = "Goth mode";
---

<label class="goth-switch">
  <input type="checkbox" id="goth-toggle" aria-label={label} />
  <span class="slider" aria-hidden="true"></span>
  <span class="switch-label">ðŸ¦‡ Goth mode</span>
</label>

<script>
  (function () {
    const LINK_ID = "goth-css";
    const CSS_HREF = "/themes/goth/goth.css";
    const DECOR_URL = "/themes/goth/decor.html";
    const WRAP_ID = "goth-decor-wrapper";
    const KEY = "theme:goth";
    const cb = document.getElementById("goth-toggle") as HTMLInputElement | null;

    function ensureCssLink() {
      let el = document.getElementById(LINK_ID);
      if (!el) {
        el = document.createElement("link");
        (el as HTMLLinkElement).id = LINK_ID;
        (el as HTMLLinkElement).rel = "stylesheet";
        (el as HTMLLinkElement).href = CSS_HREF;
        (el as HTMLLinkElement).media = "all";
        (el as HTMLLinkElement).disabled = true;
        document.head.appendChild(el);
      }
      return el;
    }

    async function mountDecor() {
      if (document.getElementById(WRAP_ID)) return;
      try {
        const res = await fetch(DECOR_URL, { credentials: "same-origin" });
        if (!res.ok) return;
        const html = await res.text();
        const wrap = document.createElement("div");
        wrap.id = WRAP_ID;
        wrap.innerHTML = html;
        document.body.appendChild(wrap);
      } catch {}
    }

    function unmountDecor() {
      const el = document.getElementById(WRAP_ID);
      if (el) el.remove();
    }

    function setOn(on: boolean) {
      const link = ensureCssLink();
      (link as HTMLLinkElement).disabled = !on;
      localStorage.setItem(KEY, on ? "on" : "off");
      if (cb) cb.checked = on;
      if (on) mountDecor(); else unmountDecor();
    }

    ensureCssLink();
    setOn(localStorage.getItem(KEY) === "on");
    if (cb) {
      cb.addEventListener("change", (e) => setOn((e.target as HTMLInputElement).checked));
    }
  })();
</script>

<style>
  .goth-switch {
    display: inline-flex;
    align-items: center;
    gap: 0.6rem;
    margin-top: var(--space-s);
    cursor: pointer;
    color: var(--color-white);
    font-size: var(--font-m);
    user-select: none;
  }

  .goth-switch input {
    position: absolute;
    opacity: 0;
    width: 0;
    height: 0;
  }

  .goth-switch .slider {
    position: relative;
    inline-size: 2.8rem;
    block-size: 1.6rem;
    border-radius: 999px;
    border: 2px solid var(--color-white);
    background-color: transparent;
    overflow: hidden;
    transition: background-color .2s;
  }

  .goth-switch .slider::before {
    content: "";
    position: absolute;
    top: .15rem; left: .15rem;
    inline-size: 1.1rem; block-size: 1.1rem;
    border-radius: 50%;
    background-color: var(--color-white);
    transition: transform .2s;
    z-index: 2;
  }

  .goth-switch .slider::after {
    content: "ðŸ¦‡";
    position: absolute;
    top: 50%; left: .55rem;
    transform: translate(-50%,-50%);
    font-size: .95rem;
    opacity: 0;
    transition: opacity .2s, left .2s;
    z-index: 3;
  }

  .goth-switch input:focus-visible + .slider {
    outline: 0.125em solid var(--color-white);
    outline-offset: 2px;
  }

  /* Activated stripes */
  .goth-switch input:checked + .slider {
    background: repeating-linear-gradient(
      45deg,
      #a300ff,
      #a300ff 10px,
      #ffffff 10px,
      #ffffff 20px
    );
    background-size: 200% 200%;
    animation: stripe-slide 1s linear infinite;
  }

  .goth-switch input:checked + .slider::before {
    transform: translateX(1.2rem);
  }

  .goth-switch input:checked + .slider::after {
    opacity: 1;
    left: 2.25rem;
  }

  @keyframes stripe-slide {
    0%   { background-position: 0 0; }
    100% { background-position: 40px 40px; }
  }

  .switch-label { color: var(--color-white); }
</style>
